---
import Layout from '../../layouts/Layout.astro'
import Header from '../../components/Header.astro'
import Footer from '../../components/Footer.astro'
import Hero from '../../components/Hero.astro'
import EventCard from '../../components/EventCard.astro'
import CalendarWidget from '../../components/CalendarWidget.astro'
import { supabase } from '../../lib/supabase'
import type { Event, Category } from '../../lib/supabase'
import { Calendar, Filter, Search, MapPin, Clock } from 'lucide-astro'

// Fetch upcoming events from database
let upcomingEvents: Event[] = []
let pastEvents: Event[] = []
let categories: Category[] = []

try {
  const currentDate = new Date().toISOString().split('T')[0]
  
  // Fetch upcoming events
  const { data: upcomingData, error: upcomingError } = await supabase
    .from('events')
    .select(`
      *,
      category:categories(*),
      tags:event_tags(tag:tags(*))
    `)
    .eq('status', 'published')
    .gte('start_date', currentDate)
    .order('start_date', { ascending: true })
  
  if (upcomingError) {
    console.error('Error fetching upcoming events:', upcomingError)
  } else {
    upcomingEvents = (upcomingData || []).map(event => ({
      ...event,
      tags: event.tags?.map(t => t.tag).filter(Boolean) || []
    }))
  }

  // Fetch past events (last 6 months)
  const sixMonthsAgo = new Date()
  sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6)
  const pastDate = sixMonthsAgo.toISOString().split('T')[0]

  const { data: pastData, error: pastError } = await supabase
    .from('events')
    .select(`
      *,
      category:categories(*),
      tags:event_tags(tag:tags(*))
    `)
    .eq('status', 'published')
    .lt('start_date', currentDate)
    .gte('start_date', pastDate)
    .order('start_date', { ascending: false })
    .limit(12)
  
  if (pastError) {
    console.error('Error fetching past events:', pastError)
  } else {
    pastEvents = (pastData || []).map(event => ({
      ...event,
      tags: event.tags?.map(t => t.tag).filter(Boolean) || []
    }))
  }

} catch (error) {
  console.error('Error fetching events:', error)
}

// Fetch categories for filtering
try {
  const { data: categoriesData, error: categoriesError } = await supabase
    .from('categories')
    .select('*')
    .eq('is_active', true)
    .in('type', ['event', 'both'])
    .order('name')
  
  if (categoriesError) {
    console.error('Error fetching categories:', categoriesError)
  } else {
    categories = categoriesData || []
  }
} catch (error) {
  console.error('Error fetching categories:', error)
}

// Group events by month for better organization
const eventsByMonth = upcomingEvents.reduce((acc, event) => {
  const date = new Date(event.start_date)
  const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`
  const monthName = date.toLocaleDateString('en-US', { year: 'numeric', month: 'long' })
  
  if (!acc[monthKey]) {
    acc[monthKey] = {
      name: monthName,
      events: []
    }
  }
  acc[monthKey].events.push(event)
  return acc
}, {} as Record<string, { name: string; events: Event[] }>)
---

<Layout 
  title="Events - International School" 
  description="Discover upcoming events, activities, and important dates at International School. From academic events to community gatherings, stay connected with our vibrant school community."
>
  <Header />
  
  <!-- Hero Section -->
  <Hero 
    title="School Events"
    subtitle="Stay Connected"
    description="Join us for exciting events, activities, and important school dates. From academic celebrations to community gatherings, there's always something happening at International School."
    ctaText="View Calendar"
    ctaLink="#calendar-view"
    backgroundImage="/images/hero-school-wider.png"
  />

  <!-- Events Overview Stats -->
  <section class="py-12 bg-white">
    <div class="mx-auto max-w-screen-2xl px-4 sm:px-6 lg:px-8">
      <div class="grid md:grid-cols-4 gap-6">
        
        <div class="text-center bg-blue-50 rounded-xl p-6">
          <div class="text-3xl font-bold text-blue-600 mb-2">{upcomingEvents.length}</div>
          <div class="text-gray-600">Upcoming Events</div>
        </div>

        <div class="text-center bg-green-50 rounded-xl p-6">
          <div class="text-3xl font-bold text-green-600 mb-2">{categories.length}</div>
          <div class="text-gray-600">Event Categories</div>
        </div>

        <div class="text-center bg-purple-50 rounded-xl p-6">
          <div class="text-3xl font-bold text-purple-600 mb-2">
            {upcomingEvents.filter(e => e.is_featured).length}
          </div>
          <div class="text-gray-600">Featured Events</div>
        </div>

        <div class="text-center bg-orange-50 rounded-xl p-6">
          <div class="text-3xl font-bold text-orange-600 mb-2">
            {Object.keys(eventsByMonth).length}
          </div>
          <div class="text-gray-600">Active Months</div>
        </div>
      </div>
    </div>
  </section>

  <!-- Main Events Content -->
  <section class="py-16 bg-gray-50">
    <div class="mx-auto max-w-screen-2xl px-4 sm:px-6 lg:px-8">
      <div class="grid lg:grid-cols-4 gap-8">
        
        <!-- Main Events Area -->
        <div class="lg:col-span-3">
          
          <!-- Search and Filter Bar -->
          <div class="bg-white rounded-xl shadow-md p-6 mb-8">
            <div class="flex flex-col md:flex-row gap-4">
              
              <!-- Search -->
              <div class="flex-1">
                <div class="relative">
                  <Search class="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                  <input 
                    type="text" 
                    id="event-search"
                    placeholder="Search events..."
                    class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                  />
                </div>
              </div>

              <!-- Category Filter -->
              <div class="md:w-48">
                <select 
                  id="category-filter"
                  class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                >
                  <option value="">All Categories</option>
                  {categories.map(category => (
                    <option value={category.slug}>{category.name}</option>
                  ))}
                </select>
              </div>

              <!-- Date Filter -->
              <div class="md:w-48">
                <select 
                  id="date-filter"
                  class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                >
                  <option value="">All Dates</option>
                  <option value="this-week">This Week</option>
                  <option value="this-month">This Month</option>
                  <option value="next-month">Next Month</option>
                </select>
              </div>
            </div>
          </div>

          <!-- Featured Events -->
          {upcomingEvents.filter(e => e.is_featured).length > 0 && (
            <div class="mb-12">
              <h2 class="text-2xl font-bold text-gray-900 mb-6 flex items-center">
                <Calendar class="h-6 w-6 mr-3 text-primary-500" />
                Featured Events
              </h2>
              
              <div class="grid md:grid-cols-2 gap-6">
                {upcomingEvents.filter(e => e.is_featured).slice(0, 4).map(event => (
                  <EventCard event={event} />
                ))}
              </div>
            </div>
          )}

          <!-- Upcoming Events by Month -->
          <div id="events-container">
            {Object.keys(eventsByMonth).length > 0 ? (
              Object.entries(eventsByMonth).map(([monthKey, monthData]) => (
                <div class="mb-12" data-month={monthKey}>
                  <h2 class="text-2xl font-bold text-gray-900 mb-6 flex items-center">
                    <Calendar class="h-6 w-6 mr-3 text-primary-500" />
                    {monthData.name}
                  </h2>
                  
                  <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {monthData.events.map(event => (
                      <div 
                        class="event-item" 
                        data-category={event.category?.slug || ''}
                        data-title={event.title.toLowerCase()}
                        data-description={event.description?.toLowerCase() || ''}
                        data-date={event.start_date}
                      >
                        <EventCard event={event} />
                      </div>
                    ))}
                  </div>
                </div>
              ))
            ) : (
              <div class="text-center py-12">
                <Calendar class="h-16 w-16 text-gray-300 mx-auto mb-4" />
                <h3 class="text-xl font-semibold text-gray-900 mb-2">No Upcoming Events</h3>
                <p class="text-gray-600 mb-6">
                  There are currently no upcoming events scheduled. Check back soon for new events!
                </p>
              </div>
            )}
          </div>

          <!-- Past Events -->
          {pastEvents.length > 0 && (
            <div class="mt-16">
              <h2 class="text-2xl font-bold text-gray-900 mb-6 flex items-center">
                <Clock class="h-6 w-6 mr-3 text-gray-500" />
                Recent Past Events
              </h2>
              
              <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                {pastEvents.slice(0, 6).map(event => (
                  <div class="opacity-75 hover:opacity-100 transition-opacity duration-200">
                    <EventCard event={event} />
                  </div>
                ))}
              </div>
              
              {pastEvents.length > 6 && (
                <div class="text-center mt-8">
                  <button 
                    id="load-more-past"
                    class="px-6 py-3 bg-gray-500 text-white font-medium rounded-lg hover:bg-gray-600 transition-colors duration-200"
                  >
                    Load More Past Events
                  </button>
                </div>
              )}
            </div>
          )}

          <!-- No Results Message -->
          <div id="no-results" class="text-center py-12 hidden">
            <div class="text-gray-400 mb-4">
              <Search class="h-16 w-16 mx-auto" />
            </div>
            <h3 class="text-xl font-semibold text-gray-900 mb-2">No events found</h3>
            <p class="text-gray-600">Try adjusting your search criteria or filters.</p>
          </div>
        </div>

        <!-- Sidebar -->
        <div class="space-y-8">
          
          <!-- Calendar Widget -->
          <div id="calendar-view">
            <CalendarWidget events={upcomingEvents} />
          </div>
          
          <!-- Event Categories -->
          <div class="bg-white rounded-xl shadow-md overflow-hidden">
            <div class="bg-primary-500 text-white p-4">
              <h3 class="text-lg font-semibold flex items-center">
                <Filter class="h-5 w-5 mr-2" />
                Event Categories
              </h3>
            </div>
            <div class="p-4">
              <div class="space-y-2">
                {categories.map(category => {
                  const categoryEvents = upcomingEvents.filter(e => e.category_id === category.id)
                  return (
                    <button 
                      class="category-filter-btn flex items-center justify-between w-full py-2 px-3 rounded-lg hover:bg-gray-50 transition-colors duration-200 text-left"
                      data-category={category.slug}
                    >
                      <div class="flex items-center">
                        <div 
                          class="w-3 h-3 rounded-full mr-3"
                          style={`background-color: ${category.color || '#10B981'}`}
                        ></div>
                        <span class="text-gray-700">{category.name}</span>
                      </div>
                      <span class="text-sm text-gray-500 bg-gray-100 px-2 py-1 rounded-full">
                        {categoryEvents.length}
                      </span>
                    </button>
                  )
                })}
              </div>
            </div>
          </div>

          <!-- Quick Actions -->
          <div class="bg-white rounded-xl shadow-md overflow-hidden">
            <div class="bg-blue-500 text-white p-4">
              <h3 class="text-lg font-semibold">Quick Actions</h3>
            </div>
            <div class="p-4 space-y-3">
              <a 
                href="/academic-year" 
                class="block w-full px-4 py-2 bg-primary-500 text-white font-medium rounded-lg hover:bg-primary-600 transition-colors duration-200 text-center"
              >
                Apply for Admission
              </a>
              <a 
                href="/contact" 
                class="block w-full px-4 py-2 border border-primary-500 text-primary-600 font-medium rounded-lg hover:bg-primary-50 transition-colors duration-200 text-center"
              >
                Contact Us
              </a>
              <a 
                href="/campus-facilities" 
                class="block w-full px-4 py-2 border border-gray-300 text-gray-700 font-medium rounded-lg hover:bg-gray-50 transition-colors duration-200 text-center"
              >
                Schedule Tour
              </a>
            </div>
          </div>

          <!-- Event Submission -->
          <div class="bg-gradient-to-br from-green-500 to-green-600 rounded-xl p-6 text-white text-center">
            <h3 class="text-lg font-bold mb-3">Have an Event?</h3>
            <p class="text-green-100 text-sm mb-4">
              Submit your community event for consideration to be featured on our calendar.
            </p>
            <a 
              href="/contact" 
              class="inline-flex items-center justify-center w-full px-4 py-3 bg-white text-green-600 font-semibold rounded-lg hover:bg-green-50 transition-colors duration-200"
            >
              Submit Event
            </a>
          </div>
        </div>
      </div>
    </div>
  </section>

  <Footer />
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('event-search') as HTMLInputElement
    const categoryFilter = document.getElementById('category-filter') as HTMLSelectElement
    const dateFilter = document.getElementById('date-filter') as HTMLSelectElement
    const eventsContainer = document.getElementById('events-container')
    const noResults = document.getElementById('no-results')
    const categoryButtons = document.querySelectorAll('.category-filter-btn')
    
    if (!searchInput || !categoryFilter || !dateFilter || !eventsContainer || !noResults) return
    
    function filterEvents() {
      const searchTerm = searchInput.value.toLowerCase()
      const selectedCategory = categoryFilter.value
      const selectedDateRange = dateFilter.value
      
      const eventItems = document.querySelectorAll('.event-item')
      const monthSections = document.querySelectorAll('[data-month]')
      
      let visibleCount = 0
      const today = new Date()
      
      // Hide all month sections first
      monthSections.forEach(section => {
        (section as HTMLElement).style.display = 'none'
      })
      
      eventItems.forEach(item => {
        const element = item as HTMLElement
        const title = element.dataset.title || ''
        const description = element.dataset.description || ''
        const category = element.dataset.category || ''
        const eventDate = new Date(element.dataset.date || '')
        const monthSection = element.closest('[data-month]') as HTMLElement
        
        const matchesSearch = !searchTerm || title.includes(searchTerm) || description.includes(searchTerm)
        const matchesCategory = !selectedCategory || category === selectedCategory
        
        let matchesDate = true
        if (selectedDateRange) {
          const daysDiff = Math.ceil((eventDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24))
          
          switch (selectedDateRange) {
            case 'this-week':
              matchesDate = daysDiff >= 0 && daysDiff <= 7
              break
            case 'this-month':
              matchesDate = eventDate.getMonth() === today.getMonth() && eventDate.getFullYear() === today.getFullYear()
              break
            case 'next-month':
              const nextMonth = new Date(today.getFullYear(), today.getMonth() + 1, 1)
              matchesDate = eventDate.getMonth() === nextMonth.getMonth() && eventDate.getFullYear() === nextMonth.getFullYear()
              break
          }
        }
        
        const isVisible = matchesSearch && matchesCategory && matchesDate
        
        element.style.display = isVisible ? 'block' : 'none'
        
        if (isVisible) {
          visibleCount++
          // Show parent month section
          if (monthSection) monthSection.style.display = 'block'
        }
      })
      
      // Show/hide no results message
      if (visibleCount === 0) {
        eventsContainer.style.display = 'none'
        noResults.classList.remove('hidden')
      } else {
        eventsContainer.style.display = 'block'
        noResults.classList.add('hidden')
      }
    }
    
    // Add event listeners
    searchInput.addEventListener('input', filterEvents)
    categoryFilter.addEventListener('change', filterEvents)
    dateFilter.addEventListener('change', filterEvents)
    
    // Category button filters
    categoryButtons.forEach(button => {
      button.addEventListener('click', () => {
        const category = button.getAttribute('data-category') || ''
        categoryFilter.value = category
        filterEvents()
      })
    })
    
    // Load more past events functionality
    const loadMoreBtn = document.getElementById('load-more-past')
    if (loadMoreBtn) {
      loadMoreBtn.addEventListener('click', () => {
        // This would typically load more events via AJAX
        // For now, just hide the button
        loadMoreBtn.style.display = 'none'
      })
    }
  })
</script>