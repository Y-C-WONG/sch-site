---
import { ChevronLeft, ChevronRight, Calendar } from 'lucide-astro'
import type { Event } from '../lib/supabase'

interface Props {
  events?: Event[]
  showTitle?: boolean
}

const { events = [], showTitle = true } = Astro.props

// Get upcoming events for mobile view
const upcomingEvents = events
  .filter(event => new Date(event.start_date) >= new Date())
  .sort((a, b) => new Date(a.start_date).getTime() - new Date(b.start_date).getTime())
  .slice(0, 5)
---

<div class="bg-white rounded-xl shadow-md overflow-hidden">
  
  {showTitle && (
    <div class="bg-primary-500 text-white p-4">
      <h3 class="text-lg font-semibold flex items-center">
        <Calendar class="h-5 w-5 mr-2" />
        School Calendar
      </h3>
    </div>
  )}

  <!-- Desktop Calendar View -->
  <div class="hidden md:block p-4">
    <div class="calendar-container">
      <!-- Calendar Header -->
      <div class="flex items-center justify-between mb-4">
        <button class="p-2 hover:bg-gray-100 rounded-lg transition-colors duration-200" id="prev-month">
          <ChevronLeft class="h-5 w-5 text-gray-600" />
        </button>
        
        <h4 class="text-lg font-semibold text-gray-900" id="calendar-month">
          January 2025
        </h4>
        
        <button class="p-2 hover:bg-gray-100 rounded-lg transition-colors duration-200" id="next-month">
          <ChevronRight class="h-5 w-5 text-gray-600" />
        </button>
      </div>

      <!-- Calendar Grid -->
      <div class="grid grid-cols-7 gap-1 mb-2">
        <div class="p-2 text-center text-sm font-medium text-gray-500">Sun</div>
        <div class="p-2 text-center text-sm font-medium text-gray-500">Mon</div>
        <div class="p-2 text-center text-sm font-medium text-gray-500">Tue</div>
        <div class="p-2 text-center text-sm font-medium text-gray-500">Wed</div>
        <div class="p-2 text-center text-sm font-medium text-gray-500">Thu</div>
        <div class="p-2 text-center text-sm font-medium text-gray-500">Fri</div>
        <div class="p-2 text-center text-sm font-medium text-gray-500">Sat</div>
      </div>
      
      <div class="grid grid-cols-7 gap-1 relative" id="calendar-days" style="overflow: visible;">
        <!-- Calendar days will be populated by JavaScript -->
      </div>
    </div>

  </div>

  <!-- Mobile Event List View -->
  <div class="md:hidden">
    <div class="p-4">
      <h4 class="text-lg font-semibold text-gray-900 mb-4">Upcoming Events</h4>
      
      {upcomingEvents.length > 0 ? (
        <div class="space-y-3">
          {upcomingEvents.map(event => (
            <div class="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
              <div class="flex-shrink-0 bg-primary-500 text-white rounded-lg p-2 text-center min-w-[3rem]">
                <div class="text-xs font-semibold">
                  {new Date(event.start_date).toLocaleDateString('en-US', { month: 'short' }).toUpperCase()}
                </div>
                <div class="text-lg font-bold">
                  {new Date(event.start_date).getDate()}
                </div>
              </div>
              
              <div class="flex-1 min-w-0">
                <h5 class="text-sm font-medium text-gray-900 line-clamp-1">
                  <a href={`/events/${event.slug}`} class="hover:text-primary-600">
                    {event.title}
                  </a>
                </h5>
                
                <p class="text-xs text-gray-600 mt-1">
                  {new Date(event.start_date).toLocaleDateString('en-US', {
                    weekday: 'short',
                    month: 'short',
                    day: 'numeric'
                  })}
                  {event.start_time && (
                    <span class="ml-2">
                      {new Date(`2000-01-01T${event.start_time}`).toLocaleTimeString('en-US', {
                        hour: 'numeric',
                        minute: '2-digit',
                        hour12: true
                      })}
                    </span>
                  )}
                </p>
                
                {event.location && (
                  <p class="text-xs text-gray-500 mt-1 line-clamp-1">
                    üìç {event.location}
                  </p>
                )}
              </div>
              
              {event.category && (
                <div class="flex-shrink-0">
                  <span 
                    class="inline-block w-3 h-3 rounded-full"
                    style={`background-color: ${event.category.color || '#10B981'}`}
                    title={event.category.name}
                  ></span>
                </div>
              )}
            </div>
          ))}
        </div>
      ) : (
        <p class="text-gray-500 text-center py-8">
          No upcoming events scheduled.
        </p>
      )}
      
      <div class="mt-4 pt-4 border-t border-gray-200">
        <a 
          href="/news" 
          class="inline-flex items-center justify-center w-full px-4 py-2 bg-primary-500 text-white font-medium rounded-lg hover:bg-primary-600 transition-colors duration-200"
        >
          View All Events
        </a>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ events }}>
  // Calendar functionality for desktop view
  document.addEventListener('DOMContentLoaded', function() {
    const calendarDays = document.getElementById('calendar-days')
    const calendarMonth = document.getElementById('calendar-month')
    const prevBtn = document.getElementById('prev-month')
    const nextBtn = document.getElementById('next-month')
    
    if (!calendarDays || !calendarMonth || !prevBtn || !nextBtn) return
    
    let currentDate = new Date()
    currentDate.setDate(1) // Set to first day of month
    
    const monthNames = [
      'January', 'February', 'March', 'April', 'May', 'June',
      'July', 'August', 'September', 'October', 'November', 'December'
    ]
    
    function renderCalendar() {
      const year = currentDate.getFullYear()
      const month = currentDate.getMonth()
      
      // Update month display
      calendarMonth.textContent = `${monthNames[month]} ${year}`
      
      // Get first day of month and number of days
      const firstDay = new Date(year, month, 1).getDay()
      const daysInMonth = new Date(year, month + 1, 0).getDate()
      const today = new Date()
      
      // Clear previous days
      calendarDays.innerHTML = ''
      
      // Add empty cells for days before month starts
      for (let i = 0; i < firstDay; i++) {
        const emptyDay = document.createElement('div')
        emptyDay.className = 'p-2 text-center text-sm text-gray-300'
        calendarDays.appendChild(emptyDay)
      }
      
      // Add days of the month
      for (let day = 1; day <= daysInMonth; day++) {
        const dayElement = document.createElement('div')
        const dayDate = new Date(year, month, day)
        const isToday = dayDate.toDateString() === today.toDateString()
        const isPastDate = dayDate < today && !isToday
        
        // Check if there are events on this day
        const dayEvents = events.filter(event => {
          const eventDate = new Date(event.start_date)
          return eventDate.toDateString() === dayDate.toDateString()
        })
        
        const hasEvents = dayEvents.length > 0
        const hasUpcomingEvents = dayEvents.some(event => new Date(event.start_date) >= today)
        const hasPastEvents = dayEvents.some(event => new Date(event.start_date) < today)
        
        // Determine background color based on event status
        let bgClass = 'text-gray-700'
        if (isToday) {
          bgClass = 'bg-primary-500 text-white hover:bg-primary-600'
        } else if (hasEvents) {
          if (hasUpcomingEvents && !hasPastEvents) {
            // Only upcoming events - light green
            bgClass = 'bg-green-100 text-green-800 hover:bg-green-200'
          } else if (hasPastEvents && !hasUpcomingEvents) {
            // Only past events - dark green
            bgClass = 'bg-green-700 text-white hover:bg-green-800'
          } else if (hasUpcomingEvents && hasPastEvents) {
            // Mixed events - gradient or medium green
            bgClass = 'bg-green-500 text-white hover:bg-green-600'
          }
        }
        
        dayElement.className = `p-2 text-center text-sm cursor-pointer rounded-lg transition-colors duration-200 hover:bg-gray-100 relative ${bgClass}`
        
        dayElement.textContent = day.toString()
        
        // Add event dots for visual indication
        if (hasEvents) {
          const eventDotsContainer = document.createElement('div')
          eventDotsContainer.className = 'flex justify-center space-x-0.5 mt-1'
          
          // Add up to 3 dots to represent events
          const eventCount = Math.min(dayEvents.length, 3)
          for (let i = 0; i < eventCount; i++) {
            const eventDot = document.createElement('div')
            eventDot.className = 'w-1 h-1 bg-current rounded-full'
            eventDotsContainer.appendChild(eventDot)
          }
          
          dayElement.appendChild(eventDotsContainer)
          
          // Create structured tooltip content
          const tooltipData = dayEvents.map(event => {
            let timeInfo = ''
            if (event.start_time) {
              timeInfo = new Date(`2000-01-01T${event.start_time}`).toLocaleTimeString('en-US', {
                hour: 'numeric',
                minute: '2-digit',
                hour12: true
              })
            }
            return {
              title: event.title,
              location: event.location || '',
              time: timeInfo,
              category: event.category?.name || ''
            }
          })
          
          // Store event data for tooltip
          dayElement.setAttribute('data-events', JSON.stringify(tooltipData))
          dayElement.classList.add('has-events')
          
          // Add hover event listeners for tooltip
          dayElement.addEventListener('mouseenter', (e) => {
            console.log('Mouse enter on day with events:', tooltipData)
            showTooltip(e.target, tooltipData)
          })
          
          dayElement.addEventListener('mouseleave', () => {
            console.log('Mouse leave on day with events')
            hideTooltip()
          })
        }
        
        dayElement.addEventListener('click', () => {
          // Handle day click - show events for that day
          if (hasEvents) {
            console.log(`Events on ${dayDate.toDateString()}:`, dayEvents)
            // Could trigger a modal or tooltip showing events
          }
        })
        
        calendarDays.appendChild(dayElement)
      }
    }
    
    // Event listeners for navigation
    prevBtn.addEventListener('click', () => {
      currentDate.setMonth(currentDate.getMonth() - 1)
      renderCalendar()
    })
    
    nextBtn.addEventListener('click', () => {
      currentDate.setMonth(currentDate.getMonth() + 1)
      renderCalendar()
    })
    
    // Tooltip functions
    let currentTooltip = null
    
    function showTooltip(element, eventData) {
      console.log('showTooltip called with:', element, eventData)
      hideTooltip() // Remove any existing tooltip
      
      const tooltip = document.createElement('div')
      tooltip.className = 'calendar-tooltip'
      tooltip.style.cssText = `
        position: fixed;
        background: linear-gradient(135deg, #34d399 0%, #10b981 100%);
        color: #064e3b;
        padding: 16px;
        border-radius: 12px;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        min-width: 280px;
        max-width: 350px;
        z-index: 9999;
        pointer-events: none;
        opacity: 0;
        transform: scale(0.95);
        transition: all 0.2s ease;
        border: 1px solid rgba(255, 255, 255, 0.1);
      `
      
      // Header
      const header = document.createElement('div')
      header.style.cssText = `
        font-size: 13px;
        font-weight: 600;
        color: rgba(6, 78, 59, 0.7);
        margin-bottom: 12px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
      `
      header.textContent = eventData.length === 1 ? '1 Event' : `${eventData.length} Events`
      tooltip.appendChild(header)
      
      // Events
      eventData.forEach(event => {
        const eventDiv = document.createElement('div')
        eventDiv.style.cssText = `
          background: rgba(255, 255, 255, 0.4);
          border-radius: 8px;
          padding: 12px;
          margin-bottom: 8px;
          border-left: 3px solid rgba(6, 78, 59, 0.4);
        `
        
        const title = document.createElement('div')
        title.style.cssText = `
          font-size: 14px;
          font-weight: 600;
          margin-bottom: 6px;
          line-height: 1.3;
        `
        title.textContent = event.title
        eventDiv.appendChild(title)
        
        const details = document.createElement('div')
        details.style.cssText = `
          font-size: 12px;
          color: rgba(6, 78, 59, 0.8);
        `
        
        if (event.time) {
          const timeDiv = document.createElement('div')
          timeDiv.style.marginBottom = '3px'
          timeDiv.innerHTML = `üïê ${event.time}`
          details.appendChild(timeDiv)
        }
        
        if (event.location) {
          const locationDiv = document.createElement('div')
          locationDiv.style.marginBottom = '3px'
          locationDiv.innerHTML = `üìç ${event.location}`
          details.appendChild(locationDiv)
        }
        
        
        if (details.children.length > 0) {
          eventDiv.appendChild(details)
        }
        
        tooltip.appendChild(eventDiv)
      })
      
      // Position tooltip
      const rect = element.getBoundingClientRect()
      const tooltipWidth = 280 // min-width from CSS
      
      // Calculate position
      let left = rect.left + (rect.width / 2) - (tooltipWidth / 2)
      let top = rect.top - 10
      
      // Adjust for screen edges
      if (left < 10) left = 10
      if (left + tooltipWidth > window.innerWidth - 10) {
        left = window.innerWidth - tooltipWidth - 10
      }
      
      tooltip.style.left = left + 'px'
      tooltip.style.top = top + 'px'
      
      document.body.appendChild(tooltip)
      currentTooltip = tooltip
      
      // Show with animation
      requestAnimationFrame(() => {
        tooltip.style.opacity = '1'
        tooltip.style.transform = 'scale(1) translateY(-100%)'
      })
    }
    
    function hideTooltip() {
      if (currentTooltip) {
        currentTooltip.style.opacity = '0'
        currentTooltip.style.transform = 'scale(0.95) translateY(-100%)'
        setTimeout(() => {
          if (currentTooltip && currentTooltip.parentNode) {
            currentTooltip.parentNode.removeChild(currentTooltip)
          }
          currentTooltip = null
        }, 200)
      }
    }
    
    // Initial render
    renderCalendar()
  })
</script>

<style>
  .line-clamp-1 {
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* Ensure calendar container allows tooltips */
  .calendar-container {
    overflow: visible;
    position: relative;
  }
  
  #calendar-days {
    overflow: visible;
  }
  
  /* Hover animation for calendar days with events */
  .has-events {
    position: relative;
    transition: transform 0.2s ease;
  }
  
  .has-events:hover {
    transform: scale(1.05);
    z-index: 1001;
  }
</style>