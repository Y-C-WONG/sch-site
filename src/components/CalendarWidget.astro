---
import { ChevronLeft, ChevronRight, Calendar } from 'lucide-astro'
import type { Event } from '../lib/supabase'

interface Props {
  events?: Event[]
  showTitle?: boolean
}

const { events = [], showTitle = true } = Astro.props

// Get upcoming events for mobile view
const upcomingEvents = events
  .filter(event => new Date(event.start_date) >= new Date())
  .sort((a, b) => new Date(a.start_date).getTime() - new Date(b.start_date).getTime())
  .slice(0, 5)
---

<div class="bg-white rounded-xl shadow-md overflow-hidden">
  
  {showTitle && (
    <div class="bg-primary-500 text-white p-4">
      <h3 class="text-lg font-semibold flex items-center">
        <Calendar class="h-5 w-5 mr-2" />
        School Calendar
      </h3>
    </div>
  )}

  <!-- Desktop Calendar View -->
  <div class="hidden md:block p-4">
    <div class="calendar-container">
      <!-- Calendar Header -->
      <div class="flex items-center justify-between mb-4">
        <button class="p-2 hover:bg-gray-100 rounded-lg transition-colors duration-200" id="prev-month">
          <ChevronLeft class="h-5 w-5 text-gray-600" />
        </button>
        
        <h4 class="text-lg font-semibold text-gray-900" id="calendar-month">
          January 2025
        </h4>
        
        <button class="p-2 hover:bg-gray-100 rounded-lg transition-colors duration-200" id="next-month">
          <ChevronRight class="h-5 w-5 text-gray-600" />
        </button>
      </div>

      <!-- Calendar Grid -->
      <div class="grid grid-cols-7 gap-1 mb-2">
        <div class="p-2 text-center text-sm font-medium text-gray-500">Sun</div>
        <div class="p-2 text-center text-sm font-medium text-gray-500">Mon</div>
        <div class="p-2 text-center text-sm font-medium text-gray-500">Tue</div>
        <div class="p-2 text-center text-sm font-medium text-gray-500">Wed</div>
        <div class="p-2 text-center text-sm font-medium text-gray-500">Thu</div>
        <div class="p-2 text-center text-sm font-medium text-gray-500">Fri</div>
        <div class="p-2 text-center text-sm font-medium text-gray-500">Sat</div>
      </div>
      
      <div class="grid grid-cols-7 gap-1" id="calendar-days">
        <!-- Calendar days will be populated by JavaScript -->
      </div>
    </div>

    <!-- Event Legend -->
    <div class="mt-4 pt-4 border-t border-gray-200">
      <h5 class="text-sm font-medium text-gray-700 mb-2">Event Categories</h5>
      <div class="flex flex-wrap gap-2 text-xs">
        <div class="flex items-center">
          <div class="w-3 h-3 bg-blue-500 rounded-full mr-1"></div>
          <span>Academic</span>
        </div>
        <div class="flex items-center">
          <div class="w-3 h-3 bg-green-500 rounded-full mr-1"></div>
          <span>Sports</span>
        </div>
        <div class="flex items-center">
          <div class="w-3 h-3 bg-purple-500 rounded-full mr-1"></div>
          <span>Arts</span>
        </div>
        <div class="flex items-center">
          <div class="w-3 h-3 bg-orange-500 rounded-full mr-1"></div>
          <span>Community</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Mobile Event List View -->
  <div class="md:hidden">
    <div class="p-4">
      <h4 class="text-lg font-semibold text-gray-900 mb-4">Upcoming Events</h4>
      
      {upcomingEvents.length > 0 ? (
        <div class="space-y-3">
          {upcomingEvents.map(event => (
            <div class="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
              <div class="flex-shrink-0 bg-primary-500 text-white rounded-lg p-2 text-center min-w-[3rem]">
                <div class="text-xs font-semibold">
                  {new Date(event.start_date).toLocaleDateString('en-US', { month: 'short' }).toUpperCase()}
                </div>
                <div class="text-lg font-bold">
                  {new Date(event.start_date).getDate()}
                </div>
              </div>
              
              <div class="flex-1 min-w-0">
                <h5 class="text-sm font-medium text-gray-900 line-clamp-1">
                  <a href={`/events/${event.slug}`} class="hover:text-primary-600">
                    {event.title}
                  </a>
                </h5>
                
                <p class="text-xs text-gray-600 mt-1">
                  {new Date(event.start_date).toLocaleDateString('en-US', {
                    weekday: 'short',
                    month: 'short',
                    day: 'numeric'
                  })}
                  {event.start_time && (
                    <span class="ml-2">
                      {new Date(`2000-01-01T${event.start_time}`).toLocaleTimeString('en-US', {
                        hour: 'numeric',
                        minute: '2-digit',
                        hour12: true
                      })}
                    </span>
                  )}
                </p>
                
                {event.location && (
                  <p class="text-xs text-gray-500 mt-1 line-clamp-1">
                    üìç {event.location}
                  </p>
                )}
              </div>
              
              {event.category && (
                <div class="flex-shrink-0">
                  <span 
                    class="inline-block w-3 h-3 rounded-full"
                    style={`background-color: ${event.category.color || '#10B981'}`}
                    title={event.category.name}
                  ></span>
                </div>
              )}
            </div>
          ))}
        </div>
      ) : (
        <p class="text-gray-500 text-center py-8">
          No upcoming events scheduled.
        </p>
      )}
      
      <div class="mt-4 pt-4 border-t border-gray-200">
        <a 
          href="/news" 
          class="inline-flex items-center justify-center w-full px-4 py-2 bg-primary-500 text-white font-medium rounded-lg hover:bg-primary-600 transition-colors duration-200"
        >
          View All Events
        </a>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ events }}>
  // Calendar functionality for desktop view
  document.addEventListener('DOMContentLoaded', function() {
    const calendarDays = document.getElementById('calendar-days')
    const calendarMonth = document.getElementById('calendar-month')
    const prevBtn = document.getElementById('prev-month')
    const nextBtn = document.getElementById('next-month')
    
    if (!calendarDays || !calendarMonth || !prevBtn || !nextBtn) return
    
    let currentDate = new Date()
    currentDate.setDate(1) // Set to first day of month
    
    const monthNames = [
      'January', 'February', 'March', 'April', 'May', 'June',
      'July', 'August', 'September', 'October', 'November', 'December'
    ]
    
    function renderCalendar() {
      const year = currentDate.getFullYear()
      const month = currentDate.getMonth()
      
      // Update month display
      calendarMonth.textContent = `${monthNames[month]} ${year}`
      
      // Get first day of month and number of days
      const firstDay = new Date(year, month, 1).getDay()
      const daysInMonth = new Date(year, month + 1, 0).getDate()
      const today = new Date()
      
      // Clear previous days
      calendarDays.innerHTML = ''
      
      // Add empty cells for days before month starts
      for (let i = 0; i < firstDay; i++) {
        const emptyDay = document.createElement('div')
        emptyDay.className = 'p-2 text-center text-sm text-gray-300'
        calendarDays.appendChild(emptyDay)
      }
      
      // Add days of the month
      for (let day = 1; day <= daysInMonth; day++) {
        const dayElement = document.createElement('div')
        const dayDate = new Date(year, month, day)
        const isToday = dayDate.toDateString() === today.toDateString()
        
        // Check if there are events on this day
        const hasEvents = events.some(event => {
          const eventDate = new Date(event.start_date)
          return eventDate.toDateString() === dayDate.toDateString()
        })
        
        dayElement.className = `p-2 text-center text-sm cursor-pointer rounded-lg transition-colors duration-200 hover:bg-gray-100 ${
          isToday ? 'bg-primary-500 text-white hover:bg-primary-600' : 'text-gray-700'
        } ${hasEvents && !isToday ? 'bg-blue-100 text-blue-800 hover:bg-blue-200' : ''}`
        
        dayElement.textContent = day.toString()
        
        if (hasEvents) {
          const eventDot = document.createElement('div')
          eventDot.className = 'w-1 h-1 bg-current rounded-full mx-auto mt-1'
          dayElement.appendChild(eventDot)
        }
        
        dayElement.addEventListener('click', () => {
          // Handle day click - could show events for that day
          console.log('Selected date:', dayDate.toDateString())
        })
        
        calendarDays.appendChild(dayElement)
      }
    }
    
    // Event listeners for navigation
    prevBtn.addEventListener('click', () => {
      currentDate.setMonth(currentDate.getMonth() - 1)
      renderCalendar()
    })
    
    nextBtn.addEventListener('click', () => {
      currentDate.setMonth(currentDate.getMonth() + 1)
      renderCalendar()
    })
    
    // Initial render
    renderCalendar()
  })
</script>

<style>
  .line-clamp-1 {
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>